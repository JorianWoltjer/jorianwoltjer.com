version: "3"
services:
  frontend:
    build: ./frontend
    depends_on:
      - backend
    restart: unless-stopped
    container_name: jw-frontend
    hostname: frontend
    environment:
      - NODE_ENV=production
      - BACKEND=http://backend
      - NEXT_PUBLIC_BACKEND_API=/api
      - NEXT_PUBLIC_SITE_URL=https://jorianwoltjer.com
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
      - PORT=80
      - INTERNAL_TOKEN=${INTERNAL_TOKEN}
    networks:
      - website

  backend:
    build: ./backend
    depends_on:
      - db
    restart: unless-stopped
    container_name: jw-backend
    hostname: backend
    environment:
      - DATABASE_URL=postgresql://backend:${BACKEND_PASSWORD}@db/postgres
      - FRONTEND=http://frontend
      - PRODUCTION=true
      - PORT=80
      - INTERNAL_TOKEN=${INTERNAL_TOKEN}
    networks:
      - website

  db:
    image: postgres:latest
    container_name: jw-db
    hostname: db
    restart: unless-stopped
    environment:
      - BACKEND_PASSWORD=${BACKEND_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - website
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres-init.sh:/docker-entrypoint-initdb.d/init.sh

  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: jw-nginx
    networks:
      - website
    ports:
      - ${PORT}:80
    volumes:
      - ./config/nginx-default.conf:/etc/nginx/conf.d/default.conf
      - ./img:/usr/share/nginx/html/img

networks:
  website:
volumes:
  postgres-data:
